// Generated by CoffeeScript 2.7.0
(function() {
  var $alliterate, DEBUG, PARTS, TWITTER, bind, cats, final_name, name_parts, optionsFor, parts_, ref, selects, sourceInfo;

  rxt.importTags();

  bind = rx.bind;

  // const
  DEBUG = false;

  PARTS = 3;

  TWITTER = "killercup";

  parts_ = (function() {
    var results = [];
    for (var j = 0, ref = PARTS - 1; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);

  cats = window.categories;

  name_parts = rx.array(_(cats).chain().keys().sample(PARTS).value());

  $alliterate = null;

  final_name = bind(function() {
    var alliterate, first_char, ref1, ref2;
    if (!(name_parts != null ? typeof name_parts.all === "function" ? (ref1 = name_parts.all()) != null ? ref1.length : void 0 : void 0 : void 0)) {
      return console.error(name_parts, 'is not cool');
    }
    alliterate = ($alliterate != null ? typeof $alliterate.rx === "function" ? (ref2 = $alliterate.rx('checked')) != null ? typeof ref2.get === "function" ? ref2.get() : void 0 : void 0 : void 0 : void 0) || false;
    first_char = false;
    return name_parts.all().map(function(cat) {
      var random_thing, ref3, vals;
      vals = (ref3 = cats[cat]) != null ? ref3.values : void 0;
      if (!(vals != null ? vals.length : void 0)) {
        return;
      }
      random_thing = _.chain(vals).filter(function(input) {
        if (!alliterate || !first_char) {
          return true;
        } else {
          return input.charAt(0).toUpperCase() === first_char;
        }
      }).sample(1).first().value();
      if (!first_char) {
        first_char = random_thing.charAt(0).toUpperCase();
      }
      return random_thing;
    }).join(" ").split(" ").map(_.str.capitalize).join(" ");
  });

  optionsFor = function(categories, selected) {
    return _(categories).chain().pairs().sortBy(function(a) {
      return a[0];
    }).map(function([key, cat]) {
      return option({
        value: key,
        selected: key === selected
      }, cat.name);
    }).value();
  };

  sourceInfo = function(categories, selected) {
    var sec;
    if ('' === selected) {
      return "(Will be ignored.)";
    }
    sec = categories != null ? categories[selected] : void 0;
    if ((sec != null ? sec.source : void 0) == null) {
      return console.error(selected, "is not a section of", categories);
    }
    return a({
      href: sec.source
    }, "Source");
  };

  selects = function(name_parts, final_name) {
    return section({
      class: 'panel panel-default'
    }, [
      form({
        class: 'panel-body form-inline text-center',
        submit: function(ev) {
          ev.preventDefault();
          return final_name.refresh();
        }
      },
      parts_.map(function(i) {
        return div({
          class: 'form-group'
        },
      [
          select({
            class: 'form-control input-lg',
            change: function() {
              return name_parts.splice(i,
          1,
          this.val());
            }
          },
          [
            option({
              value: ''
            },
            '– Nope –')
          ].concat(optionsFor(categories,
          name_parts.at(i)))),
          div({
            class: 'help-block'
          },
          bind(function() {
            return [sourceInfo(categories,
          name_parts.at(i))];
          }))
        ]);
      }).concat([
        div({
          class: 'form-group'
        },
        [
          button({
            class: 'btn btn-lg btn-primary',
            type: 'submit'
          },
          [
            i({
              class: "icon-random"
            },
            ' '),
            "Generate!"
          ]),
          div({
            class: 'help-block'
          },
          "Click it again!")
        ]),
        div({
          class: 'form-group'
        },
        [
          label({
            for: 'alliterate'
          },
          [
            $alliterate = input({
              type: 'checkbox',
              id: 'alliterate'
            }),
            " Alliterate"
          ]),
          div({
            class: 'help-block'
          },
          "Same first characters")
        ])
      ]))
    ]);
  };

  jQuery(function($) {
    if (DEBUG) {
      window.n = name_parts;
      window.f = final_name;
    }
    $('body').addClass('js');
    $('#selects').append(selects(name_parts, final_name));
    return $('#final_name').append(span(final_name));
  });

}).call(this);
